/*
 * Copyright (c) 2025 BulbulatorMacher
 * Subject to GPL 2.0 license
 * Part of klc2kbd
 */

#include "codepage.h"
#include "converter.h"

#include <fstream>
#include <iostream>

int main(int argc, char **argv)
{
    std::cout << "Copyright (c) 2025 BulbulatorMacher" << std::endl;
    std::cout << "Subject to GPL 2.0 license" << std::endl;
    std::cout << "Part of klc2kbd" << std::endl << std::endl;

    bool invalidSyntax = argc < 2;
    bool showHelp = false;
    std::string cpFilename;
    std::string klcFilename;
    std::string kbdFilename;

    for (int i = 1; i < argc; ++i) {
        if (std::string(argv[i]) == "-h" || std::string(argv[i]) == "--help") {
            showHelp = true;
            continue;
        }
        if ((std::string(argv[i]) == "--cp") && ((i + 1) < argc)) {
            cpFilename = argv[i + 1];
            ++i;
            continue;
        }
        if ((std::string(argv[i]) == "-o") && ((i + 1) < argc)) {
            kbdFilename = argv[i + 1];
            ++i;
            continue;
        }
        if (i == argc - 1) {
            klcFilename = argv[i];
            continue;
        }
        invalidSyntax = true;
        break;
    }

    if (showHelp || invalidSyntax) {
        std::cout << "usage: klc2kbd [-h | --help] [--cp <codepage_file>] [-o <kbd_filename>] <klc_filename>"
                  << std::endl << std::endl;
    }
    if (invalidSyntax) {
        return 1;
    }
    if (showHelp) {
        std::cout << "  --cp          path to the codepage txt file. "
                     "If omitted - using Windows-1252. "
                     "Codepages can be downloaded from: "
                     "https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/" << std::endl;
        std::cout << "  -h, --help    show help" << std::endl;
        std::cout << "  -o            path to the output kbd file. "
                     "If omitted - using klc_filename but with kbd extension" << std::endl;
        std::cout << "  klc_filename  path to the input klc file generated by the MSKLC" << std::endl << std::endl;
    }

    if (klcFilename.empty()) {
        std::cout << "klc_filename not provided, exiting" << std::endl;
        return 1;
    }
    if (klcFilename.substr(klcFilename.size() - 4) != ".klc") {
        std::cout << "invalid klc_filename, exiting" << std::endl;
        return 1;
    }
    if (cpFilename.empty()) {
        std::cout << "codepage_file not provided, using Windows-1252" << std::endl;
    }
    if (kbdFilename.empty()) {
        // use the same filename as klc, but change extension to kbd
        kbdFilename = klcFilename;
        kbdFilename[kbdFilename.size() - 2] = 'b';
        kbdFilename[kbdFilename.size() - 1] = 'd';
        std::cout << "kbd_filename name not provided, using: " << kbdFilename << std::endl;
    }

    try {
        const Codepage cp = cpFilename.empty() ? Codepage::Win1252() : Codepage(cpFilename);
        Converter conv{cp, klcFilename};
        auto kbd = conv.generateKbd();

        std::ofstream kbdFile(kbdFilename, std::ios::binary);
        if (!kbdFile.is_open()) {
            throw std::runtime_error("could not open kbd file for writing");
        }
        kbdFile.write((char*)kbd.data(), kbd.size());

        std::cout << "SUCCESS" << std::endl;
        return 0;
    } catch (const std::exception &e) {
        std::cout << e.what() << std::endl << "FAIL" << std::endl;
    }

    return 2;
}
